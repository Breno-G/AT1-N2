# -*- coding: utf-8 -*-
"""Previsao_Inadinplencia1.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h62fTGPf8W730KUtQa3QObkonmOKmjqD

Primeira etapa: Limpeza de dados com pandas

# **1. Entendendo os dados**

---

O  [*default of credit card clients dataset*](https://www.kaggle.com/datasets/uciml/default-of-credit-card-clients-dataset) foi extaído do Kaggle.<br>


Nele é possível ter acesso a toda documentação.

## **1.1  Importando os pacotes e lendo os dados**
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('https://raw.githubusercontent.com/Breno-G/AT1-N2/refs/heads/main/dataset/UCI_Credit_Card.csv')

"""### Variáreis

<ol>
  <li><strong>ID</strong>: Identificador único de cada cliente.</li>
  <li><strong>LIMIT_BAL</strong>: Valor total de crédito concedido (em dólares taiwaneses), incluindo limites pessoais e adicionais.</li>
  <li><strong>SEX</strong>: Sexo do cliente: 1 para masculino, 2 para feminino.</li>
  <li><strong>EDUCATION</strong>: Grau de escolaridade: 1 = pós-graduação, 2 = universidade, 3 = ensino médio, 4 = outros, 5 e 6 = desconhecido.</li>
  <li><strong>MARRIAGE</strong>: Estado civil: 1 = casado, 2 = solteiro, 3 = outros.</li>
  <li><strong>AGE</strong>: Idade do cliente (em anos).</li>
  <li><strong>PAY_0</strong>: Situação de pagamento em setembro de 2005: -1 = pagamento em dia, 1 = atraso de 1 mês, até 9 = 9 meses ou mais de atraso.</li>
  <li><strong>PAY_2</strong>: Situação de pagamento em agosto de 2005 (mesma escala de PAY_0).</li>
  <li><strong>PAY_3</strong>: Situação de pagamento em julho de 2005 (mesma escala).</li>
  <li><strong>PAY_4</strong>: Situação de pagamento em junho de 2005 (mesma escala).</li>
  <li><strong>PAY_5</strong>: Situação de pagamento em maio de 2005 (mesma escala).</li>
  <li><strong>PAY_6</strong>: Situação de pagamento em abril de 2005 (mesma escala).</li>
  <li><strong>BILL_AMT1</strong>: Valor da fatura em setembro de 2005 (em dólares taiwaneses).</li>
  <li><strong>BILL_AMT2</strong>: Valor da fatura em agosto de 2005.</li>
  <li><strong>BILL_AMT3</strong>: Valor da fatura em julho de 2005.</li>
  <li><strong>BILL_AMT4</strong>: Valor da fatura em junho de 2005.</li>
  <li><strong>BILL_AMT5</strong>: Valor da fatura em maio de 2005.</li>
  <li><strong>BILL_AMT6</strong>: Valor da fatura em abril de 2005.</li>
  <li><strong>PAY_AMT1</strong>: Valor do pagamento realizado em setembro de 2005.</li>
  <li><strong>PAY_AMT2</strong>: Valor do pagamento realizado em agosto de 2005.</li>
  <li><strong>PAY_AMT3</strong>: Valor do pagamento realizado em julho de 2005.</li>
  <li><strong>PAY_AMT4</strong>: Valor do pagamento realizado em junho de 2005.</li>
  <li><strong>PAY_AMT5</strong>: Valor do pagamento realizado em maio de 2005.</li>
  <li><strong>PAY_AMT6</strong>: Valor do pagamento realizado em abril de 2005.</li>
  <li><strong>default.payment.next.month</strong>: Indica inadimplência no mês seguinte: 1 = sim (houve inadimplência), 0 = não.</li>
</ol>

## 1.2 Renomeando variáveis

Duas colunas podem ter nomes melhores:
"""

df = df.rename(columns={'PAY_0' : 'PAY_1',
                        'default.payment.next.month' : 'DEF_NEXT_MONTH'})

"""## 1.3 Análise e limpeza de dados

O método .info() mostra que não será necessário fazer casting.
"""

df.info()

"""### **Veficar dados estranhos no dataframe:**

"""

for col in df.columns:
    print(f"Coluna: {col}")
    print(df[col].unique())
    print("-" * 30)

"""### Limpando dados inválidos

EDUCATION: 0 não existe na documentação e 5 e 6 são desconhecidos, subtituir para 4 (outros)

MARIAGE: 0 não existe, substituir para 3 (outros
)
"""

# Corrigir valores incorretos em 'EDUCATION'
df["EDUCATION"] = df["EDUCATION"].replace({0: 4, 5: 4, 6: 4})

# Corrigir valores incorretos em 'MARRIAGE'
df["MARRIAGE"] = df["MARRIAGE"].replace({0: 3})

#Verificar
for col in ['MARRIAGE', 'EDUCATION']:
    print(f"Coluna: {col}")
    print(df[col].unique())
    print("-" * 30)

"""A coluna PAY_[n] contem numeros negativos, que sugere que o cliente pagou antecipadamente. Mas além de não estar documentado, pode atrapalhar o processo de aprendizado de máquina."""

#Corrigir valores negativos
pay_status_cols = ["PAY_1", "PAY_2", "PAY_3", "PAY_4", "PAY_5", "PAY_6"]
for col in pay_status_cols:
    df[col] = df[col].apply(lambda x: 0 if x < 0 else x)
#Verificar
for col in ["PAY_1", "PAY_2", "PAY_3", "PAY_4", "PAY_5", "PAY_6"]:
    print(f"Coluna: {col}")
    print(df[col].unique())
    print("-" * 30)

"""O dados em PAY_AMT[n] e BILL_AMT[n] precisam ser normalizados para maior precisão nas próximas etapas."""

df[['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']].describe()

#Normalização dos dados
scaler = StandardScaler()
bill_amt_cols = [f"BILL_AMT{i}" for i in range(1, 7)]
pay_amt_cols = [f"PAY_AMT{i}" for i in range(1, 7)]
df[bill_amt_cols + pay_amt_cols] = scaler.fit_transform(df[bill_amt_cols + pay_amt_cols])

df[bill_amt_cols + pay_amt_cols].describe()

# Resultado final limpo
df_cleaned = df.copy()

"""# 2 Análise Exploratória (EDA)

## Vizualização por gráficos
"""

sex = df['SEX'].replace({1:'Masculino', 2:'faminino'}).value_counts().reset_index()
plt.bar(sex['SEX'], sex['count'])
plt.title('Quantidade de Pessoas por Sexo')
plt.show()

education = df['EDUCATION'].replace({
    1: 'Pós-graduação',
    2: 'Universidade',
    3: 'Graduação escolar',
    4: 'Outros',}).value_counts().reset_index()
plt.bar(education['EDUCATION'], education['count'])
plt.title('Quantidade de Pessoas por Estado Civil')
plt.show()

age = df['AGE'].value_counts().reset_index()
plt.bar(age['AGE'], age['count'])
plt.title('Quantidade de Pessoas por Idade')
plt.show()

default_next_month = df['DEF_NEXT_MONTH'].replace(
    {0:'Adimplente', 1:'Inadimplente'}
).value_counts().reset_index()
plt.bar(default_next_month['DEF_NEXT_MONTH'], default_next_month['count'], color='#BD0101')
plt.title('Situação de inadimplência no próximo mês')
plt.show()

"""

> Com os gráficos é possível observar algumas informações importantes. Em especial a "Situação de inadimplência no próximo mês", pois nela contem o alvo de para o aprendizado de máquina do projeto.


  



"""

# correlacao = df[['PAY_1', 'BILL_AMT1', 'PAY_AMT1', 'LIMIT_BAL']].corr()
# print("Matriz de Correlação: \n",correlacao)
#
# plt.imshow(correlacao, cmap='coolwarm', interpolation='none')
# plt.colorbar()
# plt.xticks(range(len(correlacao)), correlacao.columns, rotation=45)
# plt.yticks(range(len(correlacao)), correlacao.columns)
# plt.title('Mapa de Correlação')
# plt.show()